buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'

def buildNumber = System.getenv("BUILD_NUMBER")

if(buildNumber != null) {
    version = '1.16.5-1.1.' + System.getenv("BUILD_NUMBER") + '-beta'
}
else {
    version = '1.16.5-1.1'
}

group = 'mods.johan24'
archivesBaseName = 'OPMonsters'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'snapshot', version: '20201028-1.16.3'
    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'

            mods {
                opmonsters {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'

            mods {
                opmonsters {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'opmonsters', '--all', '--output', file('src/generated/resources/')

            mods {
                opmonsters {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.0.4'
}

jar {
    manifest {
        attributes([
            "Specification-Title": "opmonsters",
            "Specification-Vendor": "johan24",
            "Specification-Version": "1",
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"johan24",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    repositories {
        maven {
            name = "OPMonstersBuilds"
            url = uri("https://maven.pkg.github.com/johan2403/opmonsters")
            credentials {
                username = project.findProperty('gpr.user') ?: System.getenv('GITHUB_USER')
                password = project.findProperty('gpr.key') ?: System.getenv('TOKEN')
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            groupId 'mods.johan24'
            artifactId 'opmonsters'
            version '1.16.5-1.1.' + System.getenv("BUILD_NUMBER") + '-beta'
            from(components.java)
        }
    }
}

processResources {
	inputs.property 'version', project.version

	from(sourceSets.main.resources.srcDirs) {
		include 'META-INF/mods.toml'

		expand 'version':project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude 'META-INF/mods.toml'
	}
}